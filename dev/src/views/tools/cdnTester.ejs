<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>CDN性能检测器 - Uncle1bo静态站点工具集</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-12">
        <div class="card shadow-sm">
          <div class="card-header bg-danger text-white d-flex justify-content-between align-items-center">
            <h1 class="h3 mb-0">
              <i class="bi bi-speedometer2 me-2"></i>
              CDN性能检测器
            </h1>
            <div class="btn-group" role="group">
              <a href="/" class="btn btn-sm btn-outline-light">
                <i class="bi bi-arrow-left me-1"></i>返回工具选择器
              </a>
            </div>
          </div>
          <div class="card-body">
            <div class="alert alert-info">
              <i class="bi bi-info-circle-fill me-2"></i>
              测试和分析CDN资源的响应速度和可用性，帮助您选择最适合的CDN提供商。
            </div>
            
            <!-- 控制面板 -->
            <div class="row mb-4">
              <div class="col-md-6">
                <div class="d-grid gap-2">
                  <button id="testAllBtn" class="btn btn-success btn-lg">
                    <i class="bi bi-play-circle me-2"></i>
                    开始全面测试
                  </button>
                  <button id="viewHistoryBtn" class="btn btn-outline-info">
                    <i class="bi bi-clock-history me-2"></i>
                    查看测试历史
                  </button>
                </div>
              </div>
              <div class="col-md-6">
                <div class="card bg-light">
                  <div class="card-body">
                    <h6 class="card-title">快速测试单个URL</h6>
                    <div class="input-group mb-2">
                      <input type="url" id="singleUrlInput" class="form-control" placeholder="输入CDN URL">
                      <button id="testSingleBtn" class="btn btn-outline-primary">
                        <i class="bi bi-lightning me-1"></i>
                        测试
                      </button>
                    </div>
                    <div id="singleTestResult" class="small text-muted"></div>
                  </div>
                </div>
              </div>
            </div>

            <!-- 测试状态 -->
            <div id="testStatus" class="alert alert-info d-none" role="alert">
              <div class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-3" role="status">
                  <span class="visually-hidden">Loading...</span>
                </div>
                <div>
                  <strong>正在测试中...</strong>
                  <div id="testProgress" class="small">准备开始测试</div>
                </div>
              </div>
            </div>

            <!-- 统计概览 -->
            <div id="statsOverview" class="row mb-4 d-none">
              <div class="col-md-3">
                <div class="card text-center border-primary">
                  <div class="card-body">
                    <h3 id="totalResources" class="text-primary">0</h3>
                    <p class="card-text">测试资源数</p>
                  </div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="card text-center border-success">
                  <div class="card-body">
                    <h3 id="successRate" class="text-success">0%</h3>
                    <p class="card-text">成功率</p>
                  </div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="card text-center border-info">
                  <div class="card-body">
                    <h3 id="avgResponseTime" class="text-info">0ms</h3>
                    <p class="card-text">平均响应时间</p>
                  </div>
                </div>
              </div>
              <div class="col-md-3">
                <div class="card text-center border-warning">
                  <div class="card-body">
                    <h3 id="testDuration" class="text-warning">0s</h3>
                    <p class="card-text">测试耗时</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- 详细结果 -->
            <div id="detailedResults" class="d-none">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>详细测试结果</h5>
                <div>
                  <button id="generateReportBtn" class="btn btn-outline-primary me-2">
                    <i class="bi bi-file-earmark-text me-1"></i>
                    生成报告
                  </button>
                  <button id="exportResultsBtn" class="btn btn-outline-success">
                    <i class="bi bi-download me-1"></i>
                    导出结果
                  </button>
                </div>
              </div>
              <div id="resultsContainer"></div>
            </div>

            <!-- 测试历史 -->
            <div id="historySection" class="d-none">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5>测试历史</h5>
                <button id="clearHistoryBtn" class="btn btn-outline-danger">
                  <i class="bi bi-trash me-1"></i>
                  清空历史
                </button>
              </div>
              <div id="historyContainer"></div>
            </div>
          </div>
          <div class="card-footer text-muted text-center">
            <small>CDN性能检测器 - Uncle1bo静态站点工具集</small>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Bootstrap JS Bundle with Popper -->
  <!-- CDN Fallback Manager -->
  <script src="/prod/js/cdn-fallback.js"></script>
  <script>
    // CDN管理器会自动初始化，无需手动创建实例
    window.cdnManager.loadResource('bootstrap-js').then(() => {
      console.log('Bootstrap JS 加载完成');
      // 这里可以添加依赖Bootstrap的业务逻辑
    }).catch(error => {
      console.warn('Bootstrap JS 加载失败:', error);
    });
  </script>
  
  <!-- CDN测试器脚本 -->
  <script>
    class CDNTester {
      constructor() {
        this.testResults = [];
        this.isTestingInProgress = false;
        this.currentEventSource = null; // 管理当前的EventSource连接
        this.initializeEventListeners();
        this.loadTestHistory();
      }

      initializeEventListeners() {
        document.getElementById('testAllBtn').addEventListener('click', () => this.startFullTest());
        document.getElementById('testSingleBtn').addEventListener('click', () => this.testSingleURL());
        document.getElementById('viewHistoryBtn').addEventListener('click', () => this.toggleHistoryView());
        document.getElementById('generateReportBtn').addEventListener('click', () => this.generateReport());
        document.getElementById('exportResultsBtn').addEventListener('click', () => this.exportResults());
        document.getElementById('clearHistoryBtn').addEventListener('click', () => this.clearHistory());
      }

      async startFullTest() {
        if (this.isTestingInProgress) {
          alert('测试正在进行中，请等待完成');
          return;
        }

        // 关闭之前的连接（如果存在）
        if (this.currentEventSource) {
          this.currentEventSource.close();
          this.currentEventSource = null;
        }

        this.isTestingInProgress = true;
        this.showTestStatus(true);
        this.initializeTestingView();
        
        try {
          // 使用Server-Sent Events进行实时测试
          this.currentEventSource = new EventSource('/tools/cdn-tester/test-all-stream');
          const eventSource = this.currentEventSource;
          
          eventSource.onopen = () => {
            console.log('SSE连接已建立');
          };
          
          eventSource.onmessage = (event) => {
            try {
              const data = JSON.parse(event.data);
              this.handleRealtimeEvent(data);
            } catch (error) {
              console.error('解析SSE数据失败:', error, 'Raw data:', event.data);
            }
          };
          
          eventSource.onerror = (error) => {
            console.error('SSE连接错误:', error);
            console.log('EventSource readyState:', eventSource.readyState);
            
            if (eventSource.readyState === EventSource.CLOSED) {
              console.log('SSE连接已关闭');
            } else if (eventSource.readyState === EventSource.CONNECTING) {
              console.log('SSE正在重连...');
              return; // 让浏览器自动重连
            }
            
            eventSource.close();
            this.currentEventSource = null;
            this.isTestingInProgress = false;
            this.showTestStatus(false);
            alert('实时测试连接失败，请重试');
          };
          
          // 设置超时处理
          setTimeout(() => {
            if (eventSource.readyState === EventSource.CONNECTING) {
              console.log('SSE连接超时');
              eventSource.close();
              this.currentEventSource = null;
              this.isTestingInProgress = false;
              this.showTestStatus(false);
              alert('连接超时，请检查网络连接后重试');
            }
          }, 10000); // 10秒超时
          
        } catch (error) {
          console.error('测试失败:', error);
          alert('测试失败: ' + error.message);
          this.isTestingInProgress = false;
          this.showTestStatus(false);
        }
      }
      
      handleRealtimeEvent(data) {
        switch (data.type) {
          case 'heartbeat':
            console.log('收到心跳信号');
            break;
            
          case 'start':
            console.log('测试开始:', data.message);
            break;
            
          case 'resources':
            console.log('收到资源列表:', Object.keys(data.data || {}).length);
            this.initializeResourceCards(data.data);
            break;
            
          case 'resource_start':
            console.log('开始测试资源:', data.resourceKey);
            this.updateResourceStatus(data.resourceKey, 'testing', data.progress);
            break;
            
          case 'cdn_result':
            console.log('收到CDN结果:', data.resourceKey, data.cdnIndex, data.result?.success);
            this.updateCDNResult(data.resourceKey, data.cdnIndex, data.result);
            break;
            
          case 'resource_complete':
            console.log('资源测试完成:', data.resourceKey);
            this.updateResourceComplete(data.resourceKey, data.result, data.progress);
            break;
            
          case 'resource_error':
            console.log('资源测试错误:', data.resourceKey, data.error);
            this.updateResourceError(data.resourceKey, data.error, data.progress);
            break;
            
          case 'complete':
            console.log('所有测试完成');
            this.handleTestComplete(data.data);
            this.isTestingInProgress = false;
            this.showTestStatus(false);
            // 关闭EventSource连接
            if (this.currentEventSource) {
              this.currentEventSource.close();
              this.currentEventSource = null;
            }
            break;
            
          case 'error':
            console.error('测试错误:', data.error);
            alert('测试过程中发生错误: ' + data.error);
            this.isTestingInProgress = false;
            this.showTestStatus(false);
            // 关闭EventSource连接
            if (this.currentEventSource) {
              this.currentEventSource.close();
              this.currentEventSource = null;
            }
            break;
            
          default:
            console.warn('未知的事件类型:', data.type, data);
            break;
        }
      }
      
      initializeResourceCards(resources) {
         const container = document.getElementById('resultsContainer');
         container.innerHTML = '';
         document.getElementById('detailedResults').classList.remove('d-none');
         
         Object.entries(resources).forEach(([resourceKey, resourceData]) => {
           const card = this.createRealtimeTestingCard(resourceKey, resourceData);
           container.appendChild(card);
         });
       }
       
       createRealtimeTestingCard(resourceKey, resourceData) {
         const card = document.createElement('div');
         card.className = 'card mb-3';
         card.id = `testing-${resourceKey}`;
         
         // 构建CDN列表
         const urls = [resourceData.primary, ...(resourceData.fallbacks || [])];
         let cdnListHtml = '';
         
         urls.forEach((url, index) => {
           const provider = this.extractProviderFromUrl(url);
           cdnListHtml += `
             <div class="d-flex justify-content-between align-items-center py-2 ps-3 border-start border-3 border-light ms-3 mb-2" id="cdn-${resourceKey}-${index}">
               <div>
                 <span class="badge bg-light text-dark me-2">${index + 1}</span>
                 <strong>${provider}</strong>
                 <br>
                 <small class="text-muted">${url}</small>
               </div>
               <div class="text-end">
                 <div class="spinner-border spinner-border-sm text-primary" role="status">
                   <span class="visually-hidden">等待测试...</span>
                 </div>
                 <br>
                 <small class="text-muted">等待测试...</small>
               </div>
             </div>
           `;
         });
         
         card.innerHTML = `
           <div class="card-header bg-info text-white">
             <div class="d-flex justify-content-between align-items-center">
               <h6 class="mb-0">
                 <i class="bi bi-${this.getResourceIcon(resourceData.type)} me-2"></i>
                 ${resourceData.name}
               </h6>
               <div class="text-end">
                 <div class="spinner-border spinner-border-sm" role="status">
                   <span class="visually-hidden">等待测试...</span>
                 </div>
                 <br>
                 <small>等待测试...</small>
               </div>
             </div>
           </div>
           <div class="card-body">
             ${cdnListHtml}
           </div>
         `;
         
         return card;
       }
      
      updateResourceStatus(resourceKey, status, progress) {
        const card = document.getElementById(`testing-${resourceKey}`);
        if (!card) return;
        
        const header = card.querySelector('.card-header');
        const statusElement = header.querySelector('.text-end small');
        
        if (status === 'testing') {
          header.className = 'card-header bg-warning text-dark';
          statusElement.textContent = `正在测试... (${progress}%)`;
        }
      }
      
      updateCDNResult(resourceKey, cdnIndex, result) {
        const cdnElement = document.getElementById(`cdn-${resourceKey}-${cdnIndex}`);
        if (!cdnElement) return;
        
        const resultDiv = cdnElement.querySelector('.text-end');
        const statusClass = result.success ? 'text-success' : 'text-danger';
        const statusIcon = result.success ? 'check-circle-fill' : 'x-circle-fill';
        const responseTime = result.success ? `${result.responseTime}ms` : '失败';
        
        resultDiv.innerHTML = `
          <span class="${statusClass}">
            <i class="bi bi-${statusIcon} me-1"></i>
            ${responseTime}
          </span>
          ${result.success && result.statusCode ? `<br><small class="text-muted">HTTP ${result.statusCode}</small>` : ''}
          ${result.error ? `<br><small class="text-danger">${result.error}</small>` : ''}
        `;
      }
      
      updateResourceComplete(resourceKey, result, progress) {
        const card = document.getElementById(`testing-${resourceKey}`);
        if (!card) return;
        
        const header = card.querySelector('.card-header');
        const statusElement = header.querySelector('.text-end');
        
        const successRate = result.totalTested > 0 ? Math.round((result.successCount / result.totalTested) * 100) : 0;
        
        let headerClass = 'card-header bg-secondary text-white';
        if (successRate >= 80) headerClass = 'card-header bg-success text-white';
        else if (successRate >= 50) headerClass = 'card-header bg-warning text-dark';
        else if (successRate > 0) headerClass = 'card-header bg-danger text-white';
        
        header.className = headerClass;
        statusElement.innerHTML = `
          <span class="badge bg-light text-dark">${result.successCount}/${result.totalTested} 成功</span>
          <br>
          <small>${successRate}% 成功率</small>
        `;
      }
      
      updateResourceError(resourceKey, error, progress) {
        const card = document.getElementById(`testing-${resourceKey}`);
        if (!card) return;
        
        const header = card.querySelector('.card-header');
        const statusElement = header.querySelector('.text-end small');
        
        header.className = 'card-header bg-danger text-white';
        statusElement.textContent = '测试失败';
        
        const cardBody = card.querySelector('.card-body');
        cardBody.innerHTML += `
          <div class="alert alert-danger py-2 mt-3">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>测试错误:</strong> ${error}
          </div>
        `;
      }
      
      handleTestComplete(data) {
         if (data.stats) {
           this.updateStatsOverview(data.stats);
         }
         
         this.testResults = data;
         this.saveTestResult(data);
       }
       
       async showInitialResourceList() {
         try {
           const response = await fetch('/tools/cdnTester/resources');
           if (response.ok) {
             const result = await response.json();
             if (result.success) {
               this.displayInitialResources(result.data);
             }
           }
         } catch (error) {
           console.error('获取资源列表失败:', error);
         }
       }
       
       displayInitialResources(resources) {
         const container = document.getElementById('resultsContainer');
         container.innerHTML = '';
         
         Object.entries(resources).forEach(([resourceKey, resourceData]) => {
           const card = this.createInitialResourceCard(resourceKey, resourceData);
           container.appendChild(card);
         });
       }
       
       createInitialResourceCard(resourceKey, resourceData) {
         const card = document.createElement('div');
         card.className = 'card mb-3';
         card.id = `initial-${resourceKey}`;
         
         const urls = [resourceData.primary, ...(resourceData.fallbacks || [])];
         let cdnListHtml = '';
         
         urls.forEach((url, index) => {
           const provider = this.extractProviderFromUrl(url);
           cdnListHtml += `
             <div class="d-flex justify-content-between align-items-center py-2 ps-3 border-start border-3 border-light ms-3 mb-2">
               <div>
                 <span class="badge bg-light text-dark me-2">${index + 1}</span>
                 <strong>${provider}</strong>
                 <br>
                 <small class="text-muted">${url}</small>
               </div>
               <div class="text-end">
                 <span class="text-muted">
                   <i class="bi bi-clock me-1"></i>
                   未测试
                 </span>
               </div>
             </div>
           `;
         });
         
         card.innerHTML = `
           <div class="card-header bg-light text-dark">
             <div class="d-flex justify-content-between align-items-center">
               <h6 class="mb-0">
                 <i class="bi bi-${this.getResourceIcon(resourceData.type)} me-2"></i>
                 ${resourceData.name}
               </h6>
               <div class="text-end">
                 <span class="badge bg-secondary">${urls.length} 个CDN</span>
                 <br>
                 <small class="text-muted">点击"全面测试"开始</small>
               </div>
             </div>
           </div>
           <div class="card-body">
             ${cdnListHtml}
           </div>
         `;
         
         return card;
       }

      initializeTestingView() {
        const container = document.getElementById('resultsContainer');
        container.innerHTML = '';
        document.getElementById('detailedResults').classList.remove('d-none');
        
        // 创建测试中的资源卡片
        const testResources = {
          'Bootstrap CSS': { type: 'css', cdnCount: 5 },
          'Bootstrap JS': { type: 'js', cdnCount: 5 },
          'jQuery': { type: 'js', cdnCount: 4 },
          'Font Awesome': { type: 'css', cdnCount: 3 },
          'Vue.js': { type: 'js', cdnCount: 4 }
        };
        
        Object.entries(testResources).forEach(([resourceName, config]) => {
          const testingCard = this.createTestingCard(resourceName, config);
          container.appendChild(testingCard);
        });
      }
      
      createTestingCard(resourceName, config) {
        const card = document.createElement('div');
        card.className = 'card mb-3';
        card.id = `testing-${resourceName.replace(/\s+/g, '-').toLowerCase()}`;
        
        let cdnListHtml = '';
        for (let i = 0; i < config.cdnCount; i++) {
          cdnListHtml += `
            <div class="d-flex justify-content-between align-items-center py-2 ps-3 border-start border-3 border-light ms-3 mb-2" id="cdn-${resourceName.replace(/\s+/g, '-').toLowerCase()}-${i}">
              <div>
                <span class="badge bg-light text-dark me-2">${i + 1}</span>
                <strong>CDN ${i + 1}</strong>
                <br>
                <small class="text-muted">正在获取URL...</small>
              </div>
              <div class="text-end">
                <div class="spinner-border spinner-border-sm text-primary" role="status">
                  <span class="visually-hidden">测试中...</span>
                </div>
                <br>
                <small class="text-muted">测试中...</small>
              </div>
            </div>
          `;
        }
        
        card.innerHTML = `
          <div class="card-header bg-info text-white">
            <div class="d-flex justify-content-between align-items-center">
              <h6 class="mb-0">
                <i class="bi bi-${this.getResourceIcon(config.type)} me-2"></i>
                ${resourceName}
              </h6>
              <div class="text-end">
                <div class="spinner-border spinner-border-sm" role="status">
                  <span class="visually-hidden">测试中...</span>
                </div>
                <br>
                <small>正在测试...</small>
              </div>
            </div>
          </div>
          <div class="card-body">
            ${cdnListHtml}
          </div>
        `;
        
        return card;
      }

      async testSingleURL() {
        const url = document.getElementById('singleUrlInput').value.trim();
        if (!url) {
          alert('请输入要测试的URL');
          return;
        }

        const resultDiv = document.getElementById('singleTestResult');
        resultDiv.innerHTML = '<i class="bi bi-hourglass-split"></i> 测试中...';

        try {
          const response = await fetch('/tools/cdn-tester/test-single', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ url })
          });

          if (!response.ok) {
            throw new Error('测试请求失败');
          }

          const result = await response.json();
          if (result.success) {
            const data = result.data || result; // 兼容不同的数据结构
            const statusCode = data.statusCode || 'N/A';
            const contentLength = data.headers && data.headers['content-length'] ? 
              this.formatFileSize(parseInt(data.headers['content-length'])) : 'N/A';
            
            resultDiv.innerHTML = `
              <div class="text-success">
                <i class="bi bi-check-circle"></i> 
                响应时间: ${data.responseTime}ms | 
                状态: ${statusCode} | 
                大小: ${contentLength}
              </div>
            `;
          } else {
            resultDiv.innerHTML = `<div class="text-danger"><i class="bi bi-x-circle"></i> ${result.error}</div>`;
          }
        } catch (error) {
          resultDiv.innerHTML = `<div class="text-danger"><i class="bi bi-x-circle"></i> 测试失败: ${error.message}</div>`;
        }
      }

      displayResults(data) {
         this.testResults = data;
         document.getElementById('detailedResults').classList.remove('d-none');
         
         if (data.stats) {
           this.updateStatsOverview(data.stats);
         }
         
         if (data.results) {
           this.renderDetailedResults(data.results);
         }
       }

       updateStatsOverview(stats) {
         document.getElementById('totalResources').textContent = stats.resourceCount;
         document.getElementById('successRate').textContent = stats.successRate + '%';
         document.getElementById('avgResponseTime').textContent = stats.avgResponseTime + 'ms';
         document.getElementById('testDuration').textContent = (stats.testDuration / 1000).toFixed(1) + 's';
         
         document.getElementById('statsOverview').classList.remove('d-none');
       }

       renderDetailedResults(data) {
         const container = document.getElementById('resultsContainer');
         container.innerHTML = '';
         
         if (data && typeof data === 'object') {
           Object.entries(data).forEach(([resourceName, resourceData]) => {
             const resource = {
               resourceName: resourceName,
               type: this.getResourceType(resourceName),
               results: resourceData.results || [],
               successCount: resourceData.successCount || 0,
               totalTested: resourceData.totalTested || 0,
               fastest: resourceData.fastest,
               error: resourceData.error
             };
             
             const card = this.createResourceCard(resource);
             container.appendChild(card);
           });
         }
       }
       
       getResourceType(resourceName) {
         if (resourceName.toLowerCase().includes('css')) return 'css';
         if (resourceName.toLowerCase().includes('js') || resourceName.toLowerCase().includes('javascript')) return 'js';
         return 'other';
       }

      createResourceCard(resource) {
         const card = document.createElement('div');
         card.className = 'card mb-3';
         
         const successCount = resource.successCount || 0;
         const totalCount = resource.totalTested || 0;
         const successRate = totalCount > 0 ? Math.round((successCount / totalCount) * 100) : 0;
         
         let headerClass = 'bg-secondary';
         if (successRate >= 80) headerClass = 'bg-success';
         else if (successRate >= 50) headerClass = 'bg-warning';
         else if (successRate > 0) headerClass = 'bg-danger';
         
         let cdnResultsHtml = '';
         if (resource.results && resource.results.length > 0) {
           resource.results.forEach((result, index) => {
             const statusClass = result.success ? 'text-success' : 'text-danger';
             const statusIcon = result.success ? 'check-circle-fill' : 'x-circle-fill';
             const responseTime = result.success ? `${result.responseTime}ms` : '失败';
             const provider = result.provider || this.extractProviderFromUrl(result.url);
             
             cdnResultsHtml += `
               <div class="d-flex justify-content-between align-items-center py-2 ps-3 border-start border-3 border-light ms-3 mb-2">
                 <div>
                   <span class="badge bg-light text-dark me-2">${index + 1}</span>
                   <strong>${provider}</strong>
                   <br>
                   <small class="text-muted">${result.url}</small>
                 </div>
                 <div class="text-end">
                   <span class="${statusClass}">
                     <i class="bi bi-${statusIcon} me-1"></i>
                     ${responseTime}
                   </span>
                   ${result.success && result.statusCode ? `<br><small class="text-muted">HTTP ${result.statusCode}</small>` : ''}
                   ${result.error ? `<br><small class="text-danger">${result.error}</small>` : ''}
                 </div>
               </div>
             `;
           });
         }
         
         card.innerHTML = `
           <div class="card-header ${headerClass} text-white">
             <div class="d-flex justify-content-between align-items-center">
               <h6 class="mb-0">
                 <i class="bi bi-${this.getResourceIcon(resource.type)} me-2"></i>
                 ${resource.resourceName}
               </h6>
               <div class="text-end">
                 <span class="badge bg-light text-dark">${successCount}/${totalCount} 成功</span>
                 <br>
                 <small>${successRate}% 成功率</small>
               </div>
             </div>
           </div>
           <div class="card-body">
             ${resource.fastest ? `
               <div class="alert alert-success py-2 mb-3">
                 <i class="bi bi-lightning-fill me-2"></i>
                 <strong>最快响应:</strong> ${resource.fastest.provider || this.extractProviderFromUrl(resource.fastest.url)} - ${resource.fastest.responseTime}ms
               </div>
             ` : ''}
             ${cdnResultsHtml}
             ${resource.error ? `
               <div class="alert alert-danger py-2 mt-3">
                 <i class="bi bi-exclamation-triangle-fill me-2"></i>
                 <strong>测试错误:</strong> ${resource.error}
               </div>
             ` : ''}
           </div>
         `;
         
         return card;
       }
       
       getResourceIcon(type) {
         switch(type) {
           case 'css': return 'file-earmark-code';
           case 'js': return 'file-earmark-code-fill';
           default: return 'file-earmark';
         }
       }
       
       extractProviderFromUrl(url) {
         if (url.includes('jsdelivr.net')) return 'jsDelivr';
         if (url.includes('cdnjs.cloudflare.com')) return 'cdnjs';
         if (url.includes('googleapis.com')) return 'Google CDN';
         if (url.includes('aspnetcdn.com')) return 'Microsoft CDN';
         if (url.includes('staticfile.org')) return 'Staticfile CDN';
         // BootCDN已移除 - 不可靠的CDN服务
         if (url.includes('baidu.com')) return 'Baidu CDN';
         if (url.includes('bootstrapcdn.com')) return 'Bootstrap CDN';
         if (url.includes('elemecdn.com')) return 'eleme CDN';
         
         try {
           return new URL(url).hostname;
         } catch {
           return '未知提供商';
         }
       }
       
       formatFileSize(bytes) {
         if (bytes === 0) return '0 B';
         const k = 1024;
         const sizes = ['B', 'KB', 'MB', 'GB'];
         const i = Math.floor(Math.log(bytes) / Math.log(k));
         return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
       }

      showTestStatus(show) {
        const statusDiv = document.getElementById('testStatus');
        if (show) {
          statusDiv.classList.remove('d-none');
        } else {
          statusDiv.classList.add('d-none');
        }
      }

      hideResults() {
        document.getElementById('detailedResults').classList.add('d-none');
        document.getElementById('statsOverview').classList.add('d-none');
        document.getElementById('resultsContainer').innerHTML = '';
      }

      async loadTestHistory() {
        try {
          const response = await fetch('/tools/cdn-tester/history');
          if (response.ok) {
            const history = await response.json();
            this.renderHistory(history.data || []);
          }
        } catch (error) {
          console.error('加载测试历史失败:', error);
        }
      }

      toggleHistoryView() {
        const historySection = document.getElementById('historySection');
        const detailedResults = document.getElementById('detailedResults');
        
        // 如果历史记录区域当前是隐藏的
        if (historySection.classList.contains('d-none')) {
          // 显示历史记录区域
          historySection.classList.remove('d-none');
          // 如果有当前结果显示，则隐藏它
          if (!detailedResults.classList.contains('d-none')) {
            detailedResults.classList.add('d-none');
          }
          this.loadTestHistory();
        } else {
          // 隐藏历史记录区域
          historySection.classList.add('d-none');
          // 如果之前有测试结果，重新显示
          if (this.testResults) {
            detailedResults.classList.remove('d-none');
          }
        }
      }

      renderHistory(history) {
        const container = document.getElementById('historyContainer');
        container.innerHTML = '';

        if (history.length === 0) {
          container.innerHTML = '<p class="text-muted">暂无测试历史</p>';
          return;
        }

        history.forEach(item => {
          const historyCard = document.createElement('div');
          historyCard.className = 'card mb-2';
          historyCard.innerHTML = `
            <div class="card-body">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h6 class="mb-1">${item.filename}</h6>
                  <small class="text-muted">${new Date(item.timestamp).toLocaleString()}</small>
                </div>
                <div>
                  <button class="btn btn-sm btn-outline-primary me-2" onclick="cdnTester.viewHistoryResult('${item.filename}')">
                    <i class="bi bi-eye"></i> 查看
                  </button>
                  <button class="btn btn-sm btn-outline-danger" onclick="cdnTester.deleteHistoryResult('${item.filename}')">
                    <i class="bi bi-trash"></i> 删除
                  </button>
                </div>
              </div>
            </div>
          `;
          container.appendChild(historyCard);
        });
      }

      async viewHistoryResult(filename) {
        try {
          const response = await fetch(`/tools/cdn-tester/result/${filename}`);
          if (response.ok) {
            const result = await response.json();
            // 隐藏历史记录区域
            document.getElementById('historySection').classList.add('d-none');
            // 显示历史结果
            this.displayResults(result.data);
          } else {
            alert('加载历史结果失败');
          }
        } catch (error) {
          console.error('加载历史结果失败:', error);
          alert('加载历史结果失败: ' + error.message);
        }
      }

      async deleteHistoryResult(filename) {
        if (!confirm('确定要删除这个测试结果吗？')) {
          return;
        }

        try {
          const response = await fetch(`/tools/cdn-tester/result/${filename}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            this.loadTestHistory();
          } else {
            throw new Error('删除失败');
          }
        } catch (error) {
          console.error('删除失败:', error);
          alert('删除失败: ' + error.message);
        }
      }

      async clearHistory() {
        if (!confirm('确定要清空所有测试历史吗？此操作不可恢复。')) {
          return;
        }

        try {
          const response = await fetch('/tools/cdn-tester/history');
          if (response.ok) {
            const history = await response.json();
            const deletePromises = history.data.map(item => 
              fetch(`/tools/cdn-tester/result/${item.filename}`, { method: 'DELETE' })
            );
            
            await Promise.all(deletePromises);
            this.loadTestHistory();
          }
        } catch (error) {
          console.error('清空历史失败:', error);
          alert('清空历史失败: ' + error.message);
        }
      }

      async generateReport() {
        try {
          const response = await fetch('/tools/cdn-tester/report');
          if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `cdn-test-report-${new Date().toISOString().split('T')[0]}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
          }
        } catch (error) {
          console.error('生成报告失败:', error);
          alert('生成报告失败: ' + error.message);
        }
      }

      exportResults() {
        if (this.testResults.length === 0) {
          alert('没有可导出的测试结果');
          return;
        }

        const dataStr = JSON.stringify(this.testResults, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `cdn-test-results-${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
      }

      saveTestResult(results) {
        // 这个方法会自动调用后端保存结果
        // 结果已经在后端保存，这里只是为了保持接口一致性
      }
    }

    // 初始化CDN测试工具
    const cdnTester = new CDNTester();
    
    // 等待CDN资源和DOM都加载完成后初始化
    Promise.all([
      new Promise(resolve => {
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', resolve);
        } else {
          resolve();
        }
      }),
      window.cdnManager.loadResource('bootstrap-js')
    ]).then(() => {
      // 默认显示结果区域
      document.getElementById('detailedResults').classList.remove('d-none');
      // 显示初始的资源列表
      if (typeof cdnTester.showInitialResourceList === 'function') {
        cdnTester.showInitialResourceList();
      }
    }).catch(error => {
      console.warn('CDN资源加载失败，CDN测试工具可能无法正常工作:', error);
      // 即使CDN加载失败，也尝试显示基本界面
      document.getElementById('detailedResults').classList.remove('d-none');
    });
  </script>
</body>
</html>