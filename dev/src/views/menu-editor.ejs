<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>目录编辑器 - Uncle1bo静态站点工具集</title>
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Bootstrap Icons -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
  <!-- jQueryUI CSS -->
  <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .menu-tree {
      min-height: 300px;
      border: 1px solid #dee2e6;
      border-radius: 0.25rem;
      padding: 1rem;
      background-color: #f8f9fa;
    }
    .menu-item {
      padding: 0.5rem;
      margin-bottom: 0.5rem;
      border: 1px solid #dee2e6;
      border-radius: 0.25rem;
      background-color: white;
      cursor: pointer;
    }
    .menu-item:hover {
      background-color: #e9ecef;
    }
    .menu-item.active {
      border-color: #0d6efd;
      background-color: #e7f1ff;
    }
    .submenu-item {
      margin-left: 2rem;
    }
    .menu-placeholder {
      border: 1px dashed #ced4da;
      background-color: #f1f3f5;
      height: 2.5rem;
      margin-bottom: 0.5rem;
      border-radius: 0.25rem;
    }
    .menu-actions {
      position: absolute;
      right: 0.5rem;
      top: 0.5rem;
    }
    .menu-item-content {
      margin-right: 80px;
    }
    .parent-indicator {
      color: #6c757d;
      margin-left: 0.5rem;
    }
  </style>
</head>
<body>
  <div class="container mt-5">
    <div class="row justify-content-center">
      <div class="col-md-10">
        <div class="card shadow-sm">
          <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h1 class="h3 mb-0">目录编辑器</h1>
            <a href="/" class="btn btn-sm btn-outline-light">
              <i class="bi bi-house-door-fill me-1"></i>返回首页
            </a>
          </div>
          <div class="card-body">
            <div class="alert alert-info">
              <i class="bi bi-info-circle-fill me-2"></i>
              此工具用于管理网站的导航菜单结构。您可以添加、编辑、删除和重新排序导航菜单项。
            </div>
            
            <div class="row mt-4">
              <!-- 左侧：菜单树形结构 -->
              <div class="col-md-6">
                <div class="card">
                  <div class="card-header bg-light">
                    <h5 class="card-title mb-0">导航菜单结构</h5>
                  </div>
                  <div class="card-body p-0">
                    <div class="menu-tree" id="menuTree">
                      <div class="text-center py-5" id="loadingIndicator">
                        <div class="spinner-border text-primary" role="status">
                          <span class="visually-hidden">加载中...</span>
                        </div>
                        <p class="mt-2">加载菜单结构...</p>
                      </div>
                      <div id="menuItems" class="d-none"></div>
                      <div class="text-center py-5 d-none" id="emptyIndicator">
                        <i class="bi bi-exclamation-circle text-muted" style="font-size: 2rem;"></i>
                        <p class="mt-2">没有找到菜单项</p>
                      </div>
                    </div>
                    <div class="card-footer bg-white">
                      <button type="button" class="btn btn-success" id="addMenuItemBtn">
                        <i class="bi bi-plus-circle me-1"></i>添加菜单项
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- 右侧：编辑表单 -->
              <div class="col-md-6">
                <div class="card">
                  <div class="card-header bg-light">
                    <h5 class="card-title mb-0" id="formTitle">编辑菜单项</h5>
                  </div>
                  <div class="card-body">
                    <form id="menuItemForm">
                      <input type="hidden" id="menuItemId">
                      
                      <div class="mb-3">
                        <label for="menuItemName" class="form-label">菜单名称 <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="menuItemName" required>
                        <div class="form-text">显示在导航栏中的名称</div>
                      </div>
                      
                      <div class="mb-3">
                        <label for="menuItemLink" class="form-label">链接URL <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="menuItemLink" required>
                        <div class="form-text">例如：{{rootPath}}index.html 或 {{rootPath}}pages/about.html</div>
                      </div>
                      
                      <div class="mb-3">
                        <label for="menuItemI18n" class="form-label">多语言键</label>
                        <input type="text" class="form-control" id="menuItemI18n">
                        <div class="form-text">例如：nav.home 或 nav.about</div>
                      </div>
                      
                      <div class="mb-3">
                        <label class="form-label">菜单层级</label>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="menuLevel" id="menuLevelTop" value="top" checked>
                          <label class="form-check-label" for="menuLevelTop">
                            一级菜单
                          </label>
                        </div>
                        <div class="form-check">
                          <input class="form-check-input" type="radio" name="menuLevel" id="menuLevelSub" value="sub">
                          <label class="form-check-label" for="menuLevelSub">
                            二级菜单
                          </label>
                        </div>
                      </div>
                      
                      <div class="mb-3 d-none" id="parentSelectContainer">
                        <label for="parentMenuItem" class="form-label">父菜单 <span class="text-danger">*</span></label>
                        <select class="form-select" id="parentMenuItem">
                          <option value="">选择父菜单...</option>
                        </select>
                      </div>
                      
                      <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-danger" id="deleteMenuItemBtn" disabled>
                          <i class="bi bi-trash me-1"></i>删除
                        </button>
                        <div>
                          <button type="button" class="btn btn-secondary me-2" id="cancelBtn">
                            <i class="bi bi-x-circle me-1"></i>取消
                          </button>
                          <button type="submit" class="btn btn-primary" id="saveMenuItemBtn">
                            <i class="bi bi-check-circle me-1"></i>保存
                          </button>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- 保存按钮 -->
            <div class="d-grid gap-2 mt-4">
              <button type="button" class="btn btn-lg btn-primary" id="saveAllBtn">
                <i class="bi bi-save me-2"></i>保存所有更改
              </button>
            </div>
            
            <!-- 结果提示 -->
            <div class="mt-4 d-none" id="successAlert">
              <div class="alert alert-success">
                <i class="bi bi-check-circle-fill me-2"></i>
                <span id="successMessage">导航菜单结构已成功保存！</span>
              </div>
            </div>
            
            <div class="mt-4 d-none" id="errorAlert">
              <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <span id="errorMessage">保存导航菜单结构时发生错误。</span>
              </div>
            </div>
          </div>
          <div class="card-footer text-muted text-center">
            <small>Uncle1bo静态站点工具集 &copy; 2023</small>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- 确认删除模态框 -->
  <div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="deleteConfirmModalLabel">确认删除</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="关闭"></button>
        </div>
        <div class="modal-body">
          <p>您确定要删除这个菜单项吗？</p>
          <p class="text-danger">如果这是一个父菜单，其所有子菜单也将被删除。</p>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">取消</button>
          <button type="button" class="btn btn-danger" id="confirmDeleteBtn">删除</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- jQuery -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <!-- jQuery UI -->
  <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
  <!-- Bootstrap JS Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <!-- Custom JavaScript -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // 全局变量
      let menuData = {
        menuItems: []
      };
      let selectedMenuItem = null;
      let isEditing = false;
      
      // DOM元素
      const menuTree = document.getElementById('menuTree');
      const menuItems = document.getElementById('menuItems');
      const loadingIndicator = document.getElementById('loadingIndicator');
      const emptyIndicator = document.getElementById('emptyIndicator');
      const menuItemForm = document.getElementById('menuItemForm');
      const formTitle = document.getElementById('formTitle');
      const menuItemId = document.getElementById('menuItemId');
      const menuItemName = document.getElementById('menuItemName');
      const menuItemLink = document.getElementById('menuItemLink');
      const menuItemI18n = document.getElementById('menuItemI18n');
      const menuLevelTop = document.getElementById('menuLevelTop');
      const menuLevelSub = document.getElementById('menuLevelSub');
      const parentSelectContainer = document.getElementById('parentSelectContainer');
      const parentMenuItem = document.getElementById('parentMenuItem');
      const addMenuItemBtn = document.getElementById('addMenuItemBtn');
      const deleteMenuItemBtn = document.getElementById('deleteMenuItemBtn');
      const cancelBtn = document.getElementById('cancelBtn');
      const saveMenuItemBtn = document.getElementById('saveMenuItemBtn');
      const saveAllBtn = document.getElementById('saveAllBtn');
      const successAlert = document.getElementById('successAlert');
      const errorAlert = document.getElementById('errorAlert');
      const successMessage = document.getElementById('successMessage');
      const errorMessage = document.getElementById('errorMessage');
      const deleteConfirmModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
      const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
      
      // 初始化
      loadMenuStructure();
      
      // 加载菜单结构
      async function loadMenuStructure() {
        try {
          loadingIndicator.classList.remove('d-none');
          menuItems.classList.add('d-none');
          emptyIndicator.classList.add('d-none');
          
          const response = await fetch('/menu-editor/structure');
          const result = await response.json();
          
          if (result.success && result.menuItems) {
            menuData.menuItems = result.menuItems;
            renderMenuItems();
            
            if (menuData.menuItems.length > 0) {
              menuItems.classList.remove('d-none');
            } else {
              emptyIndicator.classList.remove('d-none');
            }
          } else {
            emptyIndicator.classList.remove('d-none');
            console.error('加载菜单结构失败:', result.error);
          }
        } catch (error) {
          console.error('加载菜单结构失败:', error);
          emptyIndicator.classList.remove('d-none');
        } finally {
          loadingIndicator.classList.add('d-none');
        }
      }
      
      // 渲染菜单项
      function renderMenuItems() {
        menuItems.innerHTML = '';
        
        menuData.menuItems.forEach(item => {
          const menuItem = createMenuItemElement(item);
          menuItems.appendChild(menuItem);
          
          // 如果有子菜单，渲染子菜单
          if (item.children && item.children.length > 0) {
            const submenuContainer = document.createElement('div');
            submenuContainer.className = 'submenu-container';
            
            item.children.forEach(child => {
              const submenuItem = createMenuItemElement(child, true);
              submenuContainer.appendChild(submenuItem);
            });
            
            menuItems.appendChild(submenuContainer);
          }
        });
        
        // 初始化拖放功能
        initDragAndDrop();
        
        // 更新父菜单选择框
        updateParentMenuSelect();
      }
      
      // 创建菜单项元素
      function createMenuItemElement(item, isSubmenu = false) {
        const menuItem = document.createElement('div');
        menuItem.className = `menu-item position-relative ${isSubmenu ? 'submenu-item' : ''}`;
        menuItem.dataset.id = item.id;
        
        const menuItemContent = document.createElement('div');
        menuItemContent.className = 'menu-item-content';
        
        const nameSpan = document.createElement('span');
        nameSpan.className = 'menu-item-name';
        nameSpan.textContent = item.name;
        
        menuItemContent.appendChild(nameSpan);
        
        // 如果是父菜单，添加指示器
        if (item.isParent) {
          const parentIndicator = document.createElement('span');
          parentIndicator.className = 'parent-indicator';
          parentIndicator.innerHTML = '<i class="bi bi-diagram-3"></i>';
          menuItemContent.appendChild(parentIndicator);
        }
        
        // 添加操作按钮
        const actionsDiv = document.createElement('div');
        actionsDiv.className = 'menu-actions';
        
        const editBtn = document.createElement('button');
        editBtn.className = 'btn btn-sm btn-outline-primary me-1';
        editBtn.innerHTML = '<i class="bi bi-pencil"></i>';
        editBtn.title = '编辑';
        editBtn.addEventListener('click', (e) => {
          e.stopPropagation();
          editMenuItem(item);
        });
        
        actionsDiv.appendChild(editBtn);
        
        menuItem.appendChild(menuItemContent);
        menuItem.appendChild(actionsDiv);
        
        // 点击菜单项选择它
        menuItem.addEventListener('click', () => {
          selectMenuItem(item);
        });
        
        return menuItem;
      }
      
      // 初始化拖放功能
      function initDragAndDrop() {
        // 顶级菜单项拖放
        $(menuItems).sortable({
          placeholder: 'menu-placeholder',
          items: '> .menu-item',
          update: function(event, ui) {
            updateMenuOrder();
          }
        });
        
        // 子菜单项拖放
        $('.submenu-container').sortable({
          placeholder: 'menu-placeholder',
          items: '> .menu-item',
          update: function(event, ui) {
            updateMenuOrder();
          }
        });
      }
      
      // 更新菜单顺序
      function updateMenuOrder() {
        const newMenuItems = [];
        
        // 获取所有顶级菜单项
        $(menuItems).children('.menu-item').each(function() {
          const id = $(this).data('id');
          const item = findMenuItem(id);
          
          if (item) {
            // 复制菜单项，但清空children
            const newItem = {...item, children: []};
            
            // 查找并添加子菜单
            const submenuContainer = $(this).next('.submenu-container');
            if (submenuContainer.length > 0) {
              submenuContainer.children('.menu-item').each(function() {
                const childId = $(this).data('id');
                const childItem = findMenuItem(childId);
                
                if (childItem) {
                  newItem.children.push(childItem);
                }
              });
            }
            
            newMenuItems.push(newItem);
          }
        });
        
        menuData.menuItems = newMenuItems;
      }
      
      // 查找菜单项
      function findMenuItem(id) {
        // 在顶级菜单中查找
        for (const item of menuData.menuItems) {
          if (item.id === id) {
            return item;
          }
          
          // 在子菜单中查找
          if (item.children && item.children.length > 0) {
            for (const child of item.children) {
              if (child.id === id) {
                return child;
              }
            }
          }
        }
        
        return null;
      }
      
      // 更新父菜单选择框
      function updateParentMenuSelect() {
        parentMenuItem.innerHTML = '<option value="">选择父菜单...</option>';
        
        menuData.menuItems.forEach(item => {
          // 只添加没有子菜单的项目作为可能的父菜单
          if (!item.children || item.children.length === 0) {
            const option = document.createElement('option');
            option.value = item.id;
            option.textContent = item.name;
            parentMenuItem.appendChild(option);
          }
        });
      }
      
      // 选择菜单项
      function selectMenuItem(item) {
        selectedMenuItem = item;
        
        // 更新表单
        menuItemId.value = item.id;
        menuItemName.value = item.name;
        menuItemLink.value = item.link;
        menuItemI18n.value = item.i18nKey || '';
        
        // 设置菜单层级
        if (item.isParent || (item.children && item.children.length > 0)) {
          menuLevelTop.checked = true;
          parentSelectContainer.classList.add('d-none');
        } else {
          // 检查是否是子菜单
          const isSubmenu = menuData.menuItems.some(parent => {
            return parent.children && parent.children.some(child => child.id === item.id);
          });
          
          if (isSubmenu) {
            menuLevelSub.checked = true;
            parentSelectContainer.classList.remove('d-none');
            
            // 设置父菜单
            for (const parent of menuData.menuItems) {
              if (parent.children && parent.children.some(child => child.id === item.id)) {
                parentMenuItem.value = parent.id;
                break;
              }
            }
          } else {
            menuLevelTop.checked = true;
            parentSelectContainer.classList.add('d-none');
          }
        }
        
        // 更新UI状态
        formTitle.textContent = '编辑菜单项';
        deleteMenuItemBtn.disabled = false;
        isEditing = true;
        
        // 高亮选中的菜单项
        document.querySelectorAll('.menu-item').forEach(el => {
          el.classList.remove('active');
        });
        document.querySelector(`.menu-item[data-id="${item.id}"]`).classList.add('active');
      }
      
      // 编辑菜单项
      function editMenuItem(item) {
        selectMenuItem(item);
      }
      
      // 添加新菜单项
      function addMenuItem() {
        // 重置表单
        menuItemForm.reset();
        menuItemId.value = 'new-' + Date.now();
        menuLevelTop.checked = true;
        parentSelectContainer.classList.add('d-none');
        
        // 更新UI状态
        formTitle.textContent = '添加菜单项';
        deleteMenuItemBtn.disabled = true;
        isEditing = false;
        
        // 取消选中状态
        selectedMenuItem = null;
        document.querySelectorAll('.menu-item').forEach(el => {
          el.classList.remove('active');
        });
      }
      
      // 保存菜单项
      function saveMenuItem(e) {
        e.preventDefault();
        
        // 验证表单
        if (!menuItemForm.checkValidity()) {
          menuItemForm.reportValidity();
          return;
        }
        
        const id = menuItemId.value;
        const name = menuItemName.value;
        const link = menuItemLink.value;
        const i18nKey = menuItemI18n.value;
        const isTopLevel = menuLevelTop.checked;
        const parentId = parentMenuItem.value;
        
        if (isEditing) {
          // 更新现有菜单项
          updateExistingMenuItem(id, name, link, i18nKey, isTopLevel, parentId);
        } else {
          // 添加新菜单项
          addNewMenuItem(id, name, link, i18nKey, isTopLevel, parentId);
        }
        
        // 重新渲染菜单
        renderMenuItems();
        
        // 重置表单
        addMenuItem();
      }
      
      // 更新现有菜单项
      function updateExistingMenuItem(id, name, link, i18nKey, isTopLevel, parentId) {
        const item = findMenuItem(id);
        
        if (!item) return;
        
        // 更新基本属性
        item.name = name;
        item.link = link;
        item.i18nKey = i18nKey;
        
        if (isTopLevel) {
          // 如果是顶级菜单，需要从父菜单中移除
          for (const parent of menuData.menuItems) {
            if (parent.children) {
              const childIndex = parent.children.findIndex(child => child.id === id);
              
              if (childIndex !== -1) {
                // 从父菜单中移除
                const child = parent.children.splice(childIndex, 1)[0];
                
                // 添加到顶级菜单
                menuData.menuItems.push(child);
              }
            }
          }
        } else {
          // 如果是子菜单，需要添加到父菜单中
          const parent = findMenuItem(parentId);
          
          if (parent) {
            // 首先从当前位置移除
            let removed = false;
            
            // 从顶级菜单中移除
            const topIndex = menuData.menuItems.findIndex(item => item.id === id);
            if (topIndex !== -1) {
              const item = menuData.menuItems.splice(topIndex, 1)[0];
              removed = true;
              
              // 确保父菜单有children数组
              if (!parent.children) {
                parent.children = [];
              }
              
              // 添加到父菜单
              parent.children.push(item);
              parent.isParent = true;
            }
            
            // 如果不在顶级菜单，检查其他父菜单
            if (!removed) {
              for (const p of menuData.menuItems) {
                if (p.children) {
                  const childIndex = p.children.findIndex(child => child.id === id);
                  
                  if (childIndex !== -1) {
                    // 从当前父菜单中移除
                    const item = p.children.splice(childIndex, 1)[0];
                    
                    // 如果当前父菜单没有子菜单了，更新状态
                    if (p.children.length === 0) {
                      p.isParent = false;
                    }
                    
                    // 确保新父菜单有children数组
                    if (!parent.children) {
                      parent.children = [];
                    }
                    
                    // 添加到新父菜单
                    parent.children.push(item);
                    parent.isParent = true;
                    break;
                  }
                }
              }
            }
          }
        }
      }
      
      // 添加新菜单项
      function addNewMenuItem(id, name, link, i18nKey, isTopLevel, parentId) {
        const newItem = {
          id,
          name,
          link,
          i18nKey,
          isParent: false,
          children: []
        };
        
        if (isTopLevel) {
          // 添加到顶级菜单
          menuData.menuItems.push(newItem);
        } else {
          // 添加到父菜单
          const parent = findMenuItem(parentId);
          
          if (parent) {
            // 确保父菜单有children数组
            if (!parent.children) {
              parent.children = [];
            }
            
            // 添加到父菜单
            parent.children.push(newItem);
            parent.isParent = true;
          }
        }
      }
      
      // 删除菜单项
      function deleteMenuItem() {
        if (!selectedMenuItem) return;
        
        const id = selectedMenuItem.id;
        
        // 检查是否是顶级菜单
        const topIndex = menuData.menuItems.findIndex(item => item.id === id);
        
        if (topIndex !== -1) {
          // 如果是首页，不允许删除
          if (menuData.menuItems[topIndex].link.includes('index.html') && menuData.menuItems.length <= 1) {
            alert('必须保留至少一个首页链接！');
            return;
          }
          
          // 从顶级菜单中移除
          menuData.menuItems.splice(topIndex, 1);
        } else {
          // 在子菜单中查找
          for (const parent of menuData.menuItems) {
            if (parent.children) {
              const childIndex = parent.children.findIndex(child => child.id === id);
              
              if (childIndex !== -1) {
                // 从父菜单中移除
                parent.children.splice(childIndex, 1);
                
                // 如果父菜单没有子菜单了，更新状态
                if (parent.children.length === 0) {
                  parent.isParent = false;
                }
                
                break;
              }
            }
          }
        }
        
        // 重新渲染菜单
        renderMenuItems();
        
        // 重置表单
        addMenuItem();
      }
      
      // 保存所有更改
      async function saveAllChanges() {
        try {
          // 禁用保存按钮
          saveAllBtn.disabled = true;
          saveAllBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>保存中...';
          
          // 隐藏提示
          successAlert.classList.add('d-none');
          errorAlert.classList.add('d-none');
          
          // 发送请求
          const response = await fetch('/menu-editor/save', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(menuData)
          });
          
          const result = await response.json();
          
          if (response.ok && result.success) {
            // 显示成功提示
            successMessage.textContent = '导航菜单结构已成功保存！';
            successAlert.classList.remove('d-none');
            
            // 滚动到提示
            successAlert.scrollIntoView({ behavior: 'smooth' });
          } else {
            // 显示错误提示
            errorMessage.textContent = result.error || '保存导航菜单结构时发生错误。';
            errorAlert.classList.remove('d-none');
            
            // 滚动到提示
            errorAlert.scrollIntoView({ behavior: 'smooth' });
          }
        } catch (error) {
          // 显示错误提示
          errorMessage.textContent = error.message || '保存导航菜单结构时发生错误。';
          errorAlert.classList.remove('d-none');
          
          // 滚动到提示
          errorAlert.scrollIntoView({ behavior: 'smooth' });
        } finally {
          // 恢复保存按钮
          saveAllBtn.disabled = false;
          saveAllBtn.innerHTML = '<i class="bi bi-save me-2"></i>保存所有更改';
        }
      }
      
      // 事件监听
      menuItemForm.addEventListener('submit', saveMenuItem);
      addMenuItemBtn.addEventListener('click', addMenuItem);
      cancelBtn.addEventListener('click', addMenuItem);
      saveAllBtn.addEventListener('click', saveAllChanges);
      confirmDeleteBtn.addEventListener('click', () => {
        deleteMenuItem();
        deleteConfirmModal.hide();
      });
      deleteMenuItemBtn.addEventListener('click', () => {
        deleteConfirmModal.show();
      });
      
      // 菜单层级切换
      menuLevelTop.addEventListener('change', () => {
        if (menuLevelTop.checked) {
          parentSelectContainer.classList.add('d-none');
        }
      });
      
      menuLevelSub.addEventListener('change', () => {
        if (menuLevelSub.checked) {
          parentSelectContainer.classList.remove('d-none');
        }
      });
    });
  </script>
</body>
</html>